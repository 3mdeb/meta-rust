From 46eeadcd2010498fcff6778b487d7bb32b7b9aa4 Mon Sep 17 00:00:00 2001
From: Cody P Schafer <dev@codyps.com>
Date: Tue, 18 Nov 2014 01:40:21 -0500
Subject: [PATCH 05/10] Target: add default target.json path:
 $libdir/rust/targets

---
 src/librustc/session/config.rs  | 6 +++---
 src/librustc/session/mod.rs     | 8 ++++++--
 src/librustc_back/target/mod.rs | 8 +++++---
 3 files changed, 14 insertions(+), 8 deletions(-)

diff --git a/src/librustc/session/config.rs b/src/librustc/session/config.rs
index efcde8b..dba6f98 100644
--- a/src/librustc/session/config.rs
+++ b/src/librustc/session/config.rs
@@ -637,12 +637,12 @@ pub fn build_configuration(sess: &Session) -> ast::CrateConfig {
     v
 }
 
-pub fn build_target_config(opts: &Options, sp: &SpanHandler) -> Config {
-    let target = match Target::search(&opts.target_triple) {
+pub fn build_target_config(sysroot: &Path, opts: &Options, sp: &SpanHandler) -> Config {
+    let target = match Target::search(sysroot, &opts.target_triple[]) {
         Ok(t) => t,
         Err(e) => {
             sp.handler().fatal(&format!("Error loading target specification: {}", e));
-    }
+        }
     };
 
     let (int_type, uint_type) = match &target.target_pointer_width[..] {
diff --git a/src/librustc/session/mod.rs b/src/librustc/session/mod.rs
index 67c39bc..17a28a7 100644
--- a/src/librustc/session/mod.rs
+++ b/src/librustc/session/mod.rs
@@ -336,14 +336,18 @@ pub fn build_session_(sopts: config::Options,
                       local_crate_source_file: Option<Path>,
                       span_diagnostic: diagnostic::SpanHandler)
                       -> Session {
-    let host = match Target::search(config::host_triple()) {
+    let sysroot = match sopts.maybe_sysroot {
+        Some(ref x) => Path::new(x),
+        None => filesearch::get_or_default_sysroot()
+    };
+    let host = match Target::search(&sysroot, config::host_triple()) {
         Ok(t) => t,
         Err(e) => {
             span_diagnostic.handler()
                 .fatal(&format!("Error loading host specification: {}", e));
     }
     };
-    let target_cfg = config::build_target_config(&sopts, &span_diagnostic);
+    let target_cfg = config::build_target_config(&sysroot, &sopts, &span_diagnostic);
     let p_s = parse::new_parse_sess_special_handler(span_diagnostic);
     let default_sysroot = match sopts.maybe_sysroot {
         Some(_) => None,
diff --git a/src/librustc_back/target/mod.rs b/src/librustc_back/target/mod.rs
index d09a7c3..7bfabac 100644
--- a/src/librustc_back/target/mod.rs
+++ b/src/librustc_back/target/mod.rs
@@ -308,13 +308,14 @@ impl Target {
     ///
     /// The error string could come from any of the APIs called, including filesystem access and
     /// JSON decoding.
-    pub fn search(target: &str) -> Result<Target, String> {
+    pub fn search(sysroot: &Path, target: &str) -> Result<Target, String> {
         use std::env;
         use std::os;
         use std::ffi::OsString;
         use std::old_io::File;
         use std::old_path::Path;
         use serialize::json;
+        use std::iter::IntoIterator;
 
         fn load_file(path: &Path) -> Result<Target, String> {
             let mut f = try!(File::open(path).map_err(|e| format!("{:?}", e)));
@@ -395,9 +396,10 @@ impl Target {
 
         let target_path = env::var_os("RUST_TARGET_PATH").unwrap_or(OsString::from_str(""));
 
-        // FIXME 16351: add a sane default search path?
+        let paths = env::split_paths(&target_path)
+            .chain(Some(sysroot.join_many(&[env!("CFG_LIBDIR_RELATIVE"), "rustlib"])).into_iter());
 
-        for dir in os::split_paths(target_path.to_str().unwrap()).iter() {
+        for dir in paths {
             let p =  dir.join(path.clone());
             if p.is_file() {
                 return load_file(&p);
-- 
2.3.1

