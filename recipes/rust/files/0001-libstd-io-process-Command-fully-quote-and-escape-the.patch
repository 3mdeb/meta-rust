From 3a42bfdbf3ad198deecdbfc2c5741c8d1b5cbb2f Mon Sep 17 00:00:00 2001
From: Cody P Schafer <dev@codyps.com>
Date: Wed, 26 Nov 2014 10:00:32 -0500
Subject: [PATCH 01/11] libstd/io/process/Command: fully quote and escape the
 command and all args

This makes the command (which may have trailing or leading white space
the user does not expect) unambiguous.

It also makes any usage of a literal ' (single quote) in arguments or
the command name unambiguous by escaping them in the same style as posix
shell.
---
 src/libstd/io/process.rs | 28 ++++++++++++++++++++++++++--
 1 file changed, 26 insertions(+), 2 deletions(-)

diff --git a/src/libstd/io/process.rs b/src/libstd/io/process.rs
index d4d24c1..90e5567 100644
--- a/src/libstd/io/process.rs
+++ b/src/libstd/io/process.rs
@@ -383,14 +383,38 @@ impl Command {
     }
 }
 
+struct SingleQuotedStr<'a> {
+    s: &'a str
+}
+
+impl<'b> SingleQuotedStr<'b> {
+    fn new<'a>(i: &'a str) -> SingleQuotedStr<'a> {
+        SingleQuotedStr { s: i }
+    }
+}
+
+impl<'a> fmt::Show for SingleQuotedStr<'a> {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        let mut elems = self.s.split('\'');
+        let fst = elems.next().unwrap_or("");
+        try!(write!(f, "'{}", fst));
+        for elem in elems {
+            try!(write!(f, "'\\''{}", elem));
+        }
+        write!(f, "'")
+    }
+}
+
 impl fmt::Show for Command {
     /// Format the program and arguments of a Command for display. Any
     /// non-utf8 data is lossily converted using the utf8 replacement
     /// character.
     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
-        try!(write!(f, "{}", String::from_utf8_lossy(self.program.as_bytes_no_nul())));
+        try!(write!(f, "{}", SingleQuotedStr::new(String::from_utf8_lossy(
+                        self.program.as_bytes_no_nul()).as_slice())));
         for arg in self.args.iter() {
-            try!(write!(f, " '{}'", String::from_utf8_lossy(arg.as_bytes_no_nul())));
+            try!(write!(f, " {}", SingleQuotedStr::new(String::from_utf8_lossy(
+                            arg.as_bytes_no_nul()).as_slice())));
         }
         Ok(())
     }
-- 
2.1.3

