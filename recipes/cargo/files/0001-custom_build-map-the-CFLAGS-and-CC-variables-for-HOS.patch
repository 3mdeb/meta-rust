From fdfb4d60b8aed0b99ba3615286767fb11d5ef361 Mon Sep 17 00:00:00 2001
From: Cody P Schafer <dev@codyps.com>
Date: Tue, 2 Dec 2014 23:24:14 -0500
Subject: [PATCH] custom_build: map the CFLAGS and CC variables for HOST builds

If a build.rs script uses gcc-rs, CC and CFLAGS are used to find the
c compiler and flags. Often, host & target will have different flags
and compilers.

Without this mapping (which allows the use of HOST_CC and HOST_CFLAGS),
it was imposible to specify the compiler and cflags to use for the host
while doing cross builds, and gcc-rs would attempt to use the target
compiler and cflags, typically failing.

We preserve the previous behavoir when the HOST_CC and HOST_CFLAGS
variables are unset, though I'm not sure if this is a good idea unless
host happens to equal target. We may want to restrict the fallback in
the future.
---
 src/cargo/ops/cargo_rustc/custom_build.rs | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/src/cargo/ops/cargo_rustc/custom_build.rs b/src/cargo/ops/cargo_rustc/custom_build.rs
index 6791e66..3f6789c 100644
--- a/src/cargo/ops/cargo_rustc/custom_build.rs
+++ b/src/cargo/ops/cargo_rustc/custom_build.rs
@@ -4,6 +4,7 @@ use std::io::fs::PathExtensions;
 use std::io::{fs, USER_RWX, File};
 use std::str;
 use std::sync::Mutex;
+use std::os;
 
 use core::{Package, Target, PackageId, PackageSet};
 use util::{CargoResult, CargoError, human};
@@ -61,7 +62,15 @@ pub fn prepare(pkg: &Package, target: &Target, req: Platform,
                      }))
                      .env("DEBUG", Some(profile.get_debug().to_string()))
                      .env("OPT_LEVEL", Some(profile.get_opt_level().to_string()))
-                     .env("PROFILE", Some(profile.get_env()));
+                     .env("PROFILE", Some(profile.get_env()))
+                     .env("CC", match kind {
+                         Kind::Host => os::getenv("HOST_CC").or(os::getenv("CC")),
+                         Kind::Target => os::getenv("CC")
+                     })
+                     .env("CFLAGS", match kind {
+                         Kind::Host => os::getenv("HOST_CFLAGS").or(os::getenv("CFLAGS")),
+                         Kind::Target => os::getenv("CFLAGS"),
+                     });
 
     // Be sure to pass along all enabled features for this package, this is the
     // last piece of statically known information that we have.
-- 
2.0.4

